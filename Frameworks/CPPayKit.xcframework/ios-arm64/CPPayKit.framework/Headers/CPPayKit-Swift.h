// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef CPPAYKIT_SWIFT_H
#define CPPAYKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CPPayKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class NSCoder;
@class UIViewController;
@class NSString;
@class NSBundle;

/// Credit Card collector : UINavigationController
/// <ul>
///   <li>
///     MUST be presented, not pushed
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8CPPayKit15CCCardCollector")
@interface CCCardCollector : UINavigationController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// Cloud Payments bank account object
SWIFT_CLASS("_TtC8CPPayKit13CPBankAccount")
@interface CPBankAccount : NSObject
/// Human readable description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The Fintiv Card Collector controller
/// Must be used by presenting it, not pushing onto a UINavigationController stack
SWIFT_CLASS("_TtC8CPPayKit23CPCardCollectController")
@interface CPCardCollectController : UINavigationController
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class CPCreditCard;
@protocol CardCollectDelegate;

/// CloudPayments card handler protocol
SWIFT_PROTOCOL("_TtP8CPPayKit13CPCardHandler_")
@protocol CPCardHandler
/// Adds a card
- (void)add:(CPCreditCard * _Nonnull)card refetch:(BOOL)refetch delegate:(id <CardCollectDelegate> _Nullable)delegate onSuccess:(void (^ _Nullable)(void))onSuccess onFailure:(void (^ _Nullable)(void))onFailure;
@end


/// Card tokenizer handler
SWIFT_CLASS("_TtC8CPPayKit20CPCardConnectHandler")
@interface CPCardConnectHandler : NSObject <CPCardHandler>
/// Adds a credit card
/// \param card card to add
///
/// \param refetch whether to fetch ALL the user’s credit cards after a succesful addition
///
/// \param delegate Collector delegate
///
/// \param onSuccess callback on success
///
/// \param onFailure callback on failure
///
- (void)add:(CPCreditCard * _Nonnull)card refetch:(BOOL)refetch delegate:(id <CardCollectDelegate> _Nullable)delegate onSuccess:(void (^ _Nullable)(void))onSuccess onFailure:(void (^ _Nullable)(void))onFailure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Credit card tokenizer
SWIFT_CLASS("_TtC8CPPayKit15CPCardTokenizer")
@interface CPCardTokenizer : NSObject <CPCardHandler>
/// Adds a card
/// \param card card to add
///
/// \param refetch refetches all the user credit cards after succesful addition if true, calles on delegate
///
/// \param delegate optional CardCollectorDelegate
///
/// \param onSuccess success callback
///
/// \param onFailure failure callback
///
- (void)add:(CPCreditCard * _Nonnull)card refetch:(BOOL)refetch delegate:(id <CardCollectDelegate> _Nullable)delegate onSuccess:(void (^ _Nullable)(void))onSuccess onFailure:(void (^ _Nullable)(void))onFailure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Inter-framework class, do not use
SWIFT_CLASS("_TtC8CPPayKit21CPConfigutationBridge")
@interface CPConfigutationBridge : NSObject
+ (NSString * _Nonnull)currentCurrencyNumber SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

/// CloudPayments credit card object
SWIFT_CLASS("_TtC8CPPayKit12CPCreditCard")
@interface CPCreditCard : NSObject
/// Human readable description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Whether this is a valid credit card
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Public initializer, used for adding a credit card
/// <ul>
///   <li>
///     Use this initializer when Adding a credit card
///   </li>
/// </ul>
/// \param accountName account name
///
/// \param accountDescription user provided account description
///
/// \param accountNumber credit card number
///
/// \param expirationMonth expiration month
///
/// \param expirationYear expiration year
///
/// \param cvv cvv number
///
/// \param cardHolder card holder’s full name (fist & last)
///
/// \param isDefault whether this will be a default accoun
///
/// \param number credit card number
///
/// \param attributes additional attributes
///
/// \param addedDate card added date
///
- (nonnull instancetype)initWithAccountName:(NSString * _Nonnull)accountName accountDescription:(NSString * _Nonnull)accountDescription accountNumber:(NSString * _Nonnull)accountNumber expirationMonth:(NSString * _Nonnull)expirationMonth expirationYear:(NSString * _Nonnull)expirationYear cvv:(NSString * _Nonnull)cvv cardHolder:(NSString * _Nonnull)cardHolder isDefault:(BOOL)isDefault currencyNumber:(NSString * _Nonnull)number attributes:(NSDictionary<NSString *, NSString *> * _Nullable)attributes addedDate:(NSDate * _Nonnull)addedDate;
@end





/// Fintiv Payment Card Collect Controller Delegate
SWIFT_PROTOCOL("_TtP8CPPayKit19CardCollectDelegate_")
@protocol CardCollectDelegate
/// Called before the controller dismisses from Cancel or succesfully adding a Credit Card
- (void)cardCollectControllerWillDismiss;
/// Called after the controller dismisses from cancel or succesfully adding a Credit Card
- (void)cardCollectControllerDidDismiss;
/// Called when a card is succesfully added via the CardCollectController
/// If CardCollectController is called with parameter refetching = true, cardCollectControllerDidAddCardWithUpdatedCards will be called instead
/// \param card The Fintiv Card View object succesfully added
///
- (void)cardCollectControllerDidAddCard:(CPCreditCard * _Nonnull)card;
/// Called when a card is succesfully added via the CardCollectController
/// Called ONLY If CardCollectController is called with parameter refetching = true, otherwise cardCollectControllerDidAddCard is called
/// \param cards Array of Fintiv Card View objects the currently has AFTER (an including) the new card
///
- (void)cardCollectControllerDidAddCardWithUpdatedCards:(NSArray<CPCreditCard *> * _Nonnull)cards;
/// Called if there is an error while adding a Credit card
/// \param message error message from network
///
- (void)cardCollectControllerDidFailWithMessage:(NSString * _Nonnull)message;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC8CPPayKit18CreditCardFormView")
@interface CreditCardFormView : UIView
@property (nonatomic, copy) IBInspectable NSString * _Nonnull cardHolderString;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)paymentCardTextFieldDidChangeWithCardNumber:(NSString * _Nullable)cardNumber expirationYear:(NSUInteger)expirationYear expirationMonth:(NSUInteger)expirationMonth cvc:(NSString * _Nullable)cvc;
- (void)paymentCardTextFieldDidEndEditingExpirationWithExpirationYear:(NSUInteger)expirationYear;
- (void)paymentCardTextFieldDidBeginEditingCVC;
- (void)paymentCardTextFieldDidEndEditingCVC;
@end


@interface CreditCardFormView (SWIFT_EXTENSION(CPPayKit))
- (void)didChangeCardholderName:(NSString * _Nonnull)name;
@end




/// Mock Card Handler, for testing
SWIFT_CLASS("_TtC8CPPayKit15MockCardHandler")
@interface MockCardHandler : NSObject <CPCardHandler>
/// MOCK ADD, DO NOT USE
- (void)add:(CPCreditCard * _Nonnull)card refetch:(BOOL)refetch delegate:(id <CardCollectDelegate> _Nullable)delegate onSuccess:(void (^ _Nullable)(void))onSuccess onFailure:(void (^ _Nullable)(void))onFailure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIViewController (SWIFT_EXTENSION(CPPayKit))
/// Convenience AlertViewController method
/// \param title String for the alert’s title
///
/// \param message Message for the alert’s body
///
/// \param cancelTitle Title of the cancel / dismiss button, button will be omitted if nil
///
/// \param completionTitle Title of the completion button, button will be omitted if nil
///
/// \param completion Completion block to execute on completion button’s action
///
- (void)presentAlertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nonnull)message cancelTitle:(NSString * _Nullable)cancelTitle completionTitle:(NSString * _Nullable)completionTitle completion:(void (^ _Nullable)(void))completion;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
