// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name CPLoginKit
import CPCloudKit
import CPCoreKit
@_exported import CPLoginKit
import Foundation
import Swift
import _Concurrency
public enum CPCredentialType : Swift.String {
  case USERNAME
  case EMAIL
  case PHONE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CPTokenValidation : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var isExpired: Swift.Bool {
    get
  }
  public var lastSignon: Foundation.Date {
    get
  }
  public var userName: Swift.String {
    get
  }
  public var uuid: Swift.String {
    get
  }
  public var userType: CPLoginKit.CPPersonType {
    get
  }
  public var tenantName: Swift.String {
    get
  }
  public var clientId: Swift.String {
    get
  }
  public var jti: Swift.String {
    get
  }
  public var expirationDate: Foundation.Date {
    get
  }
  public var authorities: [Swift.String] {
    get
  }
  public var scopes: [Swift.String] {
    get
  }
}
public struct CPSecurityQuestion : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public let questionId: Swift.Int
  public let question: Swift.String
  public let createdDate: Foundation.Date
  public let lastUpdatedDate: Foundation.Date
  public var answerId: Swift.Int?
  public var answerUUID: Swift.String?
  public mutating func setAnswer(_ answer: Swift.String)
}
@_hasMissingDesignatedInitializers @objc final public class CPUser : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  final public var info: CPLoginKit.CPUserInfo? {
    get
  }
  final public var firstName: Swift.String {
    get
  }
  final public var lastName: Swift.String {
    get
  }
  final public var username: Swift.String {
    get
  }
  final public var userId: Swift.String? {
    get
  }
  final public var roles: [CPLoginKit.CPRole] {
    get
  }
  final public var isConsumer: Swift.Bool {
    get
  }
  final public var isClerk: Swift.Bool {
    get
  }
  final public var isStoreAdmin: Swift.Bool {
    get
  }
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  @objc public init?(coder aDecoder: Foundation.NSCoder)
  public static func registrationUser(firstName: Swift.String, lastName: Swift.String, username: Swift.String, password: Swift.String?, contact: Swift.String?, contactType: CPLoginKit.CPUserContactType, pin: Swift.String?, formattedTimeZone: CPLoginKit.CPTimeZone = .fromTimeZone(TimeZone.current), preferredLanguage: CPLoginKit.CPPreferredLanguage = .English_US) -> CPLoginKit.CPUser?
  final public func loginItem() -> CPLoginKit.CPUserLoginItem?
  @objc deinit
}
extension CPLoginKit.CPUser {
  @objc override final public var description: Swift.String {
    @objc get
  }
}
extension CPLoginKit.CPUser {
  final public func registrationDictionary() -> [Swift.String : Any]?
}
extension CPLoginKit.CPUser {
  final public var credential: CPLoginKit.CPPersonCredential? {
    get
  }
}
extension CPLoginKit.CPUser {
  final public func fundsRegistrationParameters(biometricsVerified: Swift.Bool) -> [Swift.String : Any]?
  public static func mock() -> CPLoginKit.CPUser?
}
extension CPLoginKit.CPUser {
  final public func validatePin(_ pin: Swift.String, completion: ((Swift.Result<Swift.Bool, CPCoreKit.CPError>) -> ())?)
  final public func setAnswer(_ answer: Swift.String, forQuestion question: CPLoginKit.CPSecurityQuestion, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> ())?)
  final public func getAvailableSecurityQuestions(completion: ((Swift.Result<[CPLoginKit.CPSecurityQuestion], CPCoreKit.CPError>) -> ())?)
  public static func getPerson(withId id: Swift.String, completion: ((Swift.Result<CPCoreKit.CPJSON, CPCoreKit.CPError>) -> ())?)
  final public func getUserQuestions(completion: ((Swift.Result<[CPLoginKit.CPSecurityQuestion], CPCoreKit.CPError>) -> ())?)
  final public func updateSecurityQuestion(_ question: CPLoginKit.CPSecurityQuestion, withAnswer answer: Swift.String, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> ())?)
  final public func changePassword(from: Swift.String, to: Swift.String, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> ())?)
  final public func changePin(from: Swift.String, to: Swift.String, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> ())?)
  public static func resetPassword(username: Swift.String, question: CPLoginKit.CPSecurityQuestion, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> ())?)
  public static func resetPin(username: Swift.String, question: CPLoginKit.CPSecurityQuestion, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> ())?)
}
@_hasMissingDesignatedInitializers @objc final public class CPClient : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  final public let defaultRole: Swift.String?
  final public let name: Swift.String
  final public let createdDate: Foundation.Date
  final public let clientDescription: Swift.String
  final public let lastUpdatedDate: Foundation.Date
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  @objc public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum CPUserContactType : Swift.String, Swift.CustomStringConvertible, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case EMAIL
  case MOBILE
  case PHONE
  case NONE
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum CPPersonType : Swift.String, Swift.CustomStringConvertible {
  case BOX_OWNER
  case SUBSCRIBER
  case COMPANY_USER
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias CPUserTokenPair = (user: CPLoginKit.CPUser, token: CPLoginKit.CPToken?)
public struct CPRegistration {
  public init()
  public func setNewPassword(_ password: Swift.String, from current: Swift.String, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> Swift.Void)?)
  public func requestTemporaryPassword(for email: Swift.String, completion: ((Swift.Result<Swift.Void, CPCoreKit.CPError>) -> Swift.Void)?)
  public func registerUser(_ user: CPLoginKit.CPUser, completion: ((Swift.Result<CPLoginKit.CPUser, CPCoreKit.CPError>) -> Swift.Void)?)
  public func registerUser(_ user: CPLoginKit.CPUser, autologin: Swift.Bool, completion: ((Swift.Result<CPLoginKit.CPUserTokenPair, CPCoreKit.CPError>) -> Swift.Void)?)
}
extension CPLoginKit.CPToken {
  public static let NOTIFICATION_TOKEN_REMOVED: Foundation.Notification.Name
  public static let NOTIFICATION_TOKEN_STORED: Foundation.Notification.Name
}
@objc @_hasMissingDesignatedInitializers public class CPToken : ObjectiveC.NSObject, Foundation.NSSecureCoding, CPCoreKit.CPTokenProtocol {
  public static var autoRefresh: Swift.Bool
  public var isExpired: Swift.Bool {
    get
  }
  public var user: CPLoginKit.CPUser {
    get
  }
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var refreshToken: Swift.String {
    get
  }
  public var tenantName: Swift.String {
    get
  }
  public var secondsToLive: Swift.Int {
    get
  }
  public var tokenType: Swift.String {
    get
  }
  public var uuid: Swift.String {
    get
  }
  public var token: Swift.String {
    get
  }
  public var jti: Swift.String {
    get
  }
  public var scope: Swift.String {
    get
  }
  public var createdDate: Foundation.Date {
    get
  }
  public var expirationDate: Foundation.Date {
    get
  }
  public var requiresReset: Swift.Bool {
    get
  }
  public init?(fromJSON json: CPCoreKit.CPJSON)
  @objc deinit
}
extension CPLoginKit.CPToken {
  public static func mockToken(user: CPLoginKit.CPUser?) -> CPLoginKit.CPToken?
}
extension CPLoginKit.CPToken {
  @discardableResult
  public static func setToken(_ token: CPLoginKit.CPToken?) -> Swift.Bool
  public static func currentToken() -> CPLoginKit.CPToken?
  public static func destroy()
}
public func cplog(_ block: () -> ())
public struct CPUserLoginItem {
  public let username: Swift.String
  public let password: Swift.String
  public init(username: Swift.String, password: Swift.String)
}
@_hasMissingDesignatedInitializers @objc final public class CPPersonCredential : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc override final public var description: Swift.String {
    @objc get
  }
  final public let lastUpdatedDate: Foundation.Date
  final public let credentialType: CPLoginKit.CPCredentialType
  final public let credential: Swift.String
  final public let createdDate: Foundation.Date
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  @objc public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CPUserInfo : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  public var firstName: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var preferredLanguage: CPLoginKit.CPPreferredLanguage {
    get
  }
  public var username: Swift.String {
    get
  }
  public var client: CPLoginKit.CPClient? {
    get
  }
  public var personRoles: [CPLoginKit.CPPersonRole] {
    get
  }
  public var personCredentials: [CPLoginKit.CPPersonCredential] {
    get
  }
  public var contacts: [CPLoginKit.CPUserContact] {
    get
  }
  public var userId: Swift.String? {
    get
  }
  public var accountNonLocked: Swift.Bool {
    get
  }
  public var accountNonExpired: Swift.Bool {
    get
  }
  public var credentialsNonExpired: Swift.Bool {
    get
  }
  public var enabled: Swift.Bool {
    get
  }
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class CPPersonRole : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  final public let id: Swift.Int
  final public let lastUpdatedDate: Foundation.Date
  final public let authority: Swift.String
  final public let createdDate: Foundation.Date
  final public let role: CPLoginKit.CPRole
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  @objc public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CPLoginKit.CPToken {
  public func getUserInfo(completion: ((Swift.Result<CPLoginKit.CPUser, CPCoreKit.CPError>) -> ())?)
  public func refreshIfNeeded(completion: ((Swift.Result<CPLoginKit.CPToken, CPCoreKit.CPError>) -> ())?)
  public static func refreshIfNeeded(completion: ((Swift.Result<CPLoginKit.CPToken, CPCoreKit.CPError>) -> ())?)
  public func validate(completion: ((Swift.Result<CPLoginKit.CPTokenValidation, CPCoreKit.CPError>) -> ())?)
  public static func validate(token: CPLoginKit.CPToken, completion: ((Swift.Result<CPLoginKit.CPTokenValidation, CPCoreKit.CPError>) -> ())?)
}
extension CPLoginKit.CPToken {
  @discardableResult
  public static func shouldAutorefresh() -> CPCoreKit.Promise<Swift.Bool>
  @discardableResult
  public static func refreshIfNeeded(token: CPLoginKit.CPToken) -> CPCoreKit.Promise<CPLoginKit.CPToken>
  @discardableResult
  public static func refresh(token: CPLoginKit.CPToken) -> CPCoreKit.Promise<CPLoginKit.CPToken>
  public func executeAuthDependantRequest<Q>(request: @escaping (CPLoginKit.CPToken) -> CPCoreKit.Promise<Q>, completion: ((Swift.Result<Q, CPCoreKit.CPError>) -> ())?)
  public static func executeAuthDependantRequest<Q>(request: @escaping (CPLoginKit.CPToken) -> CPCoreKit.Promise<Q>, completion: ((Swift.Result<Q, CPCoreKit.CPError>) -> ())?)
}
public enum CPRoleName : Swift.String, Swift.CustomStringConvertible {
  case CONSUMER
  case CLERK
  case ADMIN
  case CORPORATE
  case STORE_MANAGER
  case REGISTRATION_ADMIN
  case MERCHANT
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class CPRole : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  final public let name: CPLoginKit.CPRoleName
  final public let id: Swift.Int
  final public let clientName: Swift.String
  final public let roleDescription: Swift.String
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  @objc public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum CPPreferredLanguage : Swift.String {
  case English_US
  case English_UK
  case English_Australian
  case English_Canadian
  case English_Indian
  case French
  case French_Canadian
  case Spanish
  case Spanish_Mexico
  case Portuguese
  case Portuguese_Brazil
  case Italian
  case German
  case Chinese
  case Chinese_Simplified
  case Chinese_Traditional
  case Chinese_Hong_Kong
  case Dutch
  case Japanese
  case Korean
  case Vietnamese
  case Russian
  case Swedish
  case Danish
  case Finnish
  case Norwegian_Bokmal
  case Turkish
  case Greek
  case Indonesian
  case Malay
  case Thai
  case Hindi
  case Hungarian
  case Polish
  case Czech
  case Slovak
  case Ukrainian
  case Catalan
  case Romanian
  case Croatian
  case Hebrew
  case Arabic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CPLogin {
  public init()
  public func logout()
  public func loginUser(user: CPLoginKit.CPUser, completion: ((Swift.Result<CPLoginKit.CPToken, CPCoreKit.CPError>) -> Swift.Void)?)
  public func loginUser(loginItem item: CPLoginKit.CPUserLoginItem, completion: ((Swift.Result<CPLoginKit.CPToken, CPCoreKit.CPError>) -> Swift.Void)?)
}
public enum CPTimeZone : Swift.RawRepresentable, Swift.CustomStringConvertible {
  case system
  case fromTimeZone(Foundation.TimeZone)
  case fromIdentifier(Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: CPLoginKit.CPTimeZone.RawValue {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class CPUserContact : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc override final public var description: Swift.String {
    @objc get
  }
  final public let contact: Swift.String
  final public let type: CPLoginKit.CPUserContactType
  final public let lastUpdateDate: Foundation.Date
  final public let id: Swift.Int
  final public let createdDate: Foundation.Date
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  @objc public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CPLoginKit.CPCredentialType : Swift.Equatable {}
extension CPLoginKit.CPCredentialType : Swift.Hashable {}
extension CPLoginKit.CPCredentialType : Swift.RawRepresentable {}
extension CPLoginKit.CPUserContactType : Swift.Equatable {}
extension CPLoginKit.CPUserContactType : Swift.Hashable {}
extension CPLoginKit.CPPersonType : Swift.Equatable {}
extension CPLoginKit.CPPersonType : Swift.Hashable {}
extension CPLoginKit.CPPersonType : Swift.RawRepresentable {}
extension CPLoginKit.CPRoleName : Swift.Equatable {}
extension CPLoginKit.CPRoleName : Swift.Hashable {}
extension CPLoginKit.CPRoleName : Swift.RawRepresentable {}
extension CPLoginKit.CPPreferredLanguage : Swift.Equatable {}
extension CPLoginKit.CPPreferredLanguage : Swift.Hashable {}
extension CPLoginKit.CPPreferredLanguage : Swift.RawRepresentable {}
